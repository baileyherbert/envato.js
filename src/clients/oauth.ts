import { Client } from './client';
import { HttpClient, RequestForm, EnvatoHttpResponse, EnvatoHttpOptions } from '../helpers/http';
import { OAuthError } from '../helpers/errors';
import url from '../util/url';

/**
 * Helper class for OAuth applications. Includes methods to both authorize new clients and renew tokens.
 */
export class OAuth {

    private _options: OAuthOptions;
    private _httpClient: HttpClient;

    public constructor(options: OAuthOptions) {
        this._options = options;
        this._httpClient = new HttpClient();
    }

    /**
     * Returns the URL that you should redirect users to in order to authenticate with the Envato API for this app.
     * This will include the `client_id` and `redirect_uri` from your options.
     */
    public getRedirectUrl() {
        return url.build('https://api.envato.com/authorization', {
            response_type: 'code',
            client_id: this._options.client_id,
            redirect_uri: this._options.redirect_uri
        });
    }

    /**
     * Authorizes the user based on the given authentication code and returns a `Client` with their access token,
     * refresh token, and expiration time configured and ready-to-go.
     *
     * @param code The single-use authentication code returned from the Envato authorization screen.
     */
    public async getClient(code: string) : Promise<Client> {
        const { body, error } = await this._sendRequest<IResponseData>({
            grant_type: 'authorization_code',
            client_id: this._options.client_id,
            client_secret: this._options.client_secret,
            code
        });

        if (error) {
            throw new OAuthError('Received an HTTP error', error);
        }

        if (!body.token_type) {
            throw new OAuthError('Unexpected response from API when renewing token');
        }

        return new Client({
            token: body.access_token,
            refreshToken: body.refresh_token,
            userAgent: this._options.userAgent,
            expiration: (new Date()).getTime() + (body.expires_in * 1000) - 1000,
            oauth: this
        });
    }

    /**
     * Returns a new access token for the given client.
     *
     * @param client The client whose access token needs to be renewed.
     */
    public async renew(client: Client) : Promise<IRefreshedToken> {
        const { error, body } = await this._sendRequest<IRefreshResponseData>({
            grant_type: 'refresh_token',
            client_id: this._options.client_id,
            client_secret: this._options.client_secret,
            refresh_token: client.refreshToken
        });

        if (error) {
            throw new OAuthError('Received HTTP error during token renewal', error);
        }

        if (!body.token_type) {
            throw new OAuthError('Unexpected response from API when renewing token');
        }

        return {
            token: body.access_token,
            access_token: body.access_token,
            accessToken: body.access_token,
            expiration: (new Date()).getTime() + (body.expires_in * 1000) - 1000
        };
    }

    /**
     * Performs an OAuth request.
     *
     * @param form
     */
    private async _sendRequest<T>(form: RequestForm) : Promise<EnvatoHttpResponse<T>> {
        const url = 'https://api.envato.com/token';
        const headers = {};
        const options = this._options.http;

        // Add the user-agent header if available
        if (this._options.userAgent) {
            headers['user-agent'] = this._options.userAgent;
        }

        // Send the request
        return await this._httpClient.fetch<T>({ url, headers, options, form, method: 'POST' });
    }

}

export interface OAuthOptions {
    /**
     * The application's unique ID.
     */
    client_id: string;

    /**
     * The application's secret.
     */
    client_secret: string;

    /**
     * The application's redirect URL. This must exactly match the URL provided when creating the application.
     */
    redirect_uri: string;

    /**
     * The user agent string to send with requests. This should briefly explain what your app is or its purpose.
     * Please do not use a generic browser user agent. Note that this also applies to `Client` instances generated by
     * the OAuth helper.
     *
     * Here are some examples of good user agents:
     *
     * - `"License activation for my themes"`
     * - `"Support forum authentication & license verification"`
     * - `"Gathering data on items"`
     */
    userAgent?: string;

    /**
     * Optional configuration for the underlying `axios` library.
     */
    http?: EnvatoHttpOptions;
};

export interface IResponseData {
    refresh_token: string;
    token_type: string;
    access_token: string;
    expires_in: number;
};

export interface IRefreshResponseData {
    token_type: string;
    access_token: string;
    expires_in: number;
};

export interface IRefreshedToken {
    /**
     * Alias for `accessToken`, here only for backwards compatibility!
     */
    token: string;

    /**
     * The new access token. This should be stored in the database alongside the existing refresh token.
     */
    accessToken: string;

    /**
     * The timestamp at which the new access token will expire (epoch milliseconds).
     */
    expiration: number;

    [key: string]: any;
};
