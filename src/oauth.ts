import * as request from 'request';
import * as url from './util/url';
import { Client } from './client';

export class OAuth {

    public constructor(private options: OAuthOptions) {

    }

    public getRedirectUrl() {
        return url.build('https://api.envato.com/authorization', {
            response_type: 'code',
            client_id: this.options.client_id,
            redirect_uri: this.options.redirect_uri
        });
    }

    /**
     * Authorizes the user based on the given authentication code and returns a `Client` with their access token,
     * refresh token, and expiration time configured and ready-to-go.
     *
     * @param code The single-use authentication code returned from the Envato authorization screen.
     */
    public getClient(code: string) : Promise<Client> {
        return new Promise((resolve, reject) => {
            request.post('https://api.envato.com/token', Object.assign({}, this.options.request || {}, {
                form: {
                    grant_type: 'authorization_code',
                    client_id: this.options.client_id,
                    client_secret: this.options.client_secret,
                    code
                },
                headers: {
                    'User-Agent': 'Envato.js (https://github.com/baileyherbert/envato.js)'
                }
            }), (err, response, body: string) => {
                if (err) return reject(err);
                if (response.statusCode !== 200) {
                    if (body.startsWith('{')) {
                        let error = JSON.parse(body);

                        if (error.error) {
                            switch (error.error) {
                                case 'invalid_grant': return reject(new Error('The given code was invalid or expired'));
                            }
                        }

                        if (error.error_description) {
                            return reject(new Error(error.error_description));
                        }
                    }

                    return reject(new Error(`Got unexpected status code (${response.statusCode})`));
                }

                let data : ResponseData = JSON.parse(body);
                if (!data.token_type) return reject(new Error('Unexpected response from API: \n' + body));

                resolve(new Client({
                    token: data.access_token,
                    refreshToken: data.refresh_token,
                    userAgent: this.options.userAgent,
                    expiration: (new Date()).getTime() + (data.expires_in * 1000) - 1000,
                    oauth: this
                }));
            });
        });
    }

    /**
     * Returns a new access token for the given client.
     *
     * @param client The client whose access token needs to be renewed.
     */
    public renew(client: Client) : Promise<RefreshedToken> {
        return new Promise((resolve, reject) => {
            request.post('https://api.envato.com/token', Object.assign({}, this.options.request || {}, {
                form: {
                    grant_type: 'refresh_token',
                    client_id: this.options.client_id,
                    client_secret: this.options.client_secret,
                    refresh_token: client.refreshToken
                },
                headers: {
                    'User-Agent': 'Envato.js (https://github.com/baileyherbert/envato.js)'
                }
            }), (err, response, body: string) => {
                if (err) return reject(err);
                if (response.statusCode !== 200) {
                    return reject(new Error(`Got unexpected status code (${response.statusCode}) when renewing token`));
                }

                let data : RefreshResponseData = JSON.parse(body);
                if (!data.token_type) return reject(new Error('Unexpected response from API when renewing token: \n' + body));

                resolve({
                    access_token: data.access_token,
                    expiration: (new Date()).getTime() + (data.expires_in * 1000) - 1000
                });
            });
        });
    }

}

export type OAuthOptions = {

    /**
     * The application's unique ID.
     */
    client_id: string;

    /**
     * The application's secret.
     */
    client_secret: string;

    /**
     * The application's redirect URL. This must exactly match the URL provided when creating the application.
     */
    redirect_uri: string;

    /**
     * The user agent string to send with requests. This should briefly explain what your app is or its purpose.
     * Please do not use a generic browser user agent. Note that this also applies to `Client` instances generated by
     * the OAuth helper.
     *
     * Here are some examples of good user agents:
     *
     * - `"License activation for my themes"`
     * - `"Support forum authentication & license verification"`
     * - `"Gathering data on items"`
     */
    userAgent ?: string;

    /**
     * Optional configuration for the underlying `request` library.
     */
    request ?: request.CoreOptions;

};

type ResponseData = {
    refresh_token: string;
    token_type: string;
    access_token: string;
    expires_in: number;
};

type RefreshResponseData = {
    token_type: string;
    access_token: string;
    expires_in: number;
};

export type RefreshedToken = {
    access_token: string;
    expiration: number;
};
